<%
  require 'uv'
  require 'json'
  @counter = 0
  def code_for(file, executable=false, show_load=true)
    @counter += 1
    return '' unless File.exists?("documentation/js/#{file}.js")
    cs = File.read("documentation/coffee/#{file}.coffee")
    js = File.read("documentation/js/#{file}.js")
    js = js.sub(/^\/\/ generated.*?\n/i, '')
    cshtml = Uv.parse(cs, 'xhtml', 'source.coffee', false, 'idle', false)
    jshtml = Uv.parse(js, 'xhtml', 'source.js', false, 'idle', false)
    append = executable  == true ? '' : "alert(#{executable});"
    if executable and executable != true
      cs.sub!(/(\S)\s*\Z/m, "\\1\n\nalert #{executable}")
    end
    run    = executable  == true ? 'executar' : "executar: #{executable}"
    name   = "example#{@counter}"
    script = "<script>window.#{name} = #{cs.to_json}</script>"
    import = show_load ? "<div class='minibutton load' onclick='javascript: loadConsole(#{name});'>carregar</div>" : ''
    button = executable ? "<div class='minibutton ok' onclick='javascript: #{js};#{append}'>#{run}</div>" : ''
    "<div class='code'>#{cshtml}#{jshtml}#{script}#{import}#{button}<br class='clear' /></div>"
  end
%>
<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
  <title>CoffeeScript</title>
  <link rel="canonical" href="http://coffeescript.com.br" />
  <link rel="stylesheet" type="text/css" href="documentation/css/docs.css" />
  <link rel="stylesheet" type="text/css" href="documentation/css/idle.css" />
  <link rel="shortcut icon" href="documentation/images/favicon.ico" />
  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-30127419-3']);
    _gaq.push(['_trackPageview']);

    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>
  <style>
  .l8p {
    font-weight: bold;
  }
  .l8p a {
    font-weight: normal;
  }
  </style>
</head>
<body>

  <div id="fadeout"></div>

  <div id="flybar">
    <a id="logo" href="#top"> </a>
    <div class="navigation toc">
      <div class="button">
        Índice
      </div>
      <div class="contents menu">
        <a href="#overview">Visão Geral</a>
        <a href="#installation">Instalação</a>
        <a href="#usage">Uso</a>
        <a href="#language">Referência da Linguagem</a>
        <a href="#literals">Literais: Funções, Objetos e Arrays</a>
        <a href="#lexical_scope">Escopo Léxico e Segurança de Variável</a>
        <a href="#conditionals">If, Else, Unless, e Atribuição Condicional</a>
        <a href="#splats">Splats...</a>
        <a href="#loops">Laços e Compreensões de Listas</a>
        <a href="#slices">Fatiamento e Substituição com Intervalos de Arrays</a>
        <a href="#expressions">Tudo é uma Expressão</a>
        <a href="#operators">Operadores e Aliases</a>
        <a href="#classes">Classes, Herança, e Superclasses</a>
        <a href="#destructuring">Atribuição de Troca</a>
        <a href="#fat_arrow">Vinculação de Funções</a>
        <a href="#embedded">JavaScript Incorporado</a>
        <a href="#switch">Switch e Try/Catch</a>
        <a href="#comparisons">Comparações em Cadeia</a>
        <a href="#strings">Interpolação de String, Blocos de String e de Comentários</a>
        <a href="#regexes">Blocos de Expressões Regulares</a>
        <a href="#cake">Cake, e Cakefiles</a>
        <a href="#scripts">Tags de Script "text/coffeescript"</a>
        <a href="#resources">Livros, Screencasts, Exemplos e Fontes</a>
        <a href="#changelog">Log de Mudanças</a>
      </div>
    </div>
    <div class="navigation try">
      <div class="button">
        Experimente CoffeeScript
        <div class="repl_bridge"></div>
      </div>
      <div class="contents repl_wrapper">
        <div class="code">
          <div class="screenshadow tl"></div>
          <div class="screenshadow tr"></div>
          <div class="screenshadow bl"></div>
          <div class="screenshadow br"></div>
          <div id="repl_source_wrap">
            <textarea id="repl_source" rows="100" spellcheck="false">alert "Olá CoffeeScript BR!"</textarea>
          </div>
          <div id="repl_results_wrap"><pre id="repl_results"></pre></div>
          <div class="minibutton dark run" title="Ctrl-Enter">Executar</div>
          <a class="minibutton permalink" id="repl_permalink">Link</a>
          <br class="clear" />
        </div>
      </div>
    </div>
    <div class="navigation annotated">
      <div class="button">
        Código Comentado
      </div>
      <div class="contents menu">
        <a href="documentation/docs/grammar.html">Regras Gramaticais <b>(em inglês)</b></a>
        <a href="documentation/docs/lexer.html">Tokens Léxicos <b>(em inglês)</b></a>
        <a href="documentation/docs/rewriter.html">O Rewriter <b>(em inglês)</b></a>
        <a href="documentation/docs/nodes.html">A Árvore de Sintaxe <b>(em inglês)</b></a>
        <a href="documentation/docs/scope.html">Escopo Léxico <b>(em inglês)</b></a>
        <a href="documentation/docs/helpers.html">Helpers &amp; Funções Utilitárias <b>(em inglês)</b></a>
        <a href="documentation/docs/coffee-script.html">O Módulo CoffeeScript <b>(em inglês)</b></a>
        <a href="documentation/docs/cake.html">Cake &amp; Cakefiles <b>(em inglês)</b></a>
        <a href="documentation/docs/command.html">Utilitário de Linha de Comando "coffee" <b>(em inglês)</b></a>
        <a href="documentation/docs/optparse.html">Parser de Opções <b>(em inglês)</b></a>
        <a href="documentation/docs/repl.html">REPL Interativo <b>(em inglês)</b></a>
      </div>
    </div>
    <div id="error" style="display:none;"></div>
  </div>

  <div class="container">
    <span class="bookmark" id="top"></span>

    <p>
      <b>CoffeeScript é uma pequena linguagem que compila para JavaScript.</b>
      Por baixo de todas essas chaves e ponto-e-vírgulas inconvenientes, JavaScript sempre teve
      um lindo modelo de objeto em seu coração. CoffeeScript é uma tentativa de expor
      as partes boas de JavaScript de uma maneira simples.
    </p>

    <p>
      A regra de ouro do CoffeeScript é: "<i>É apenas JavaScript</i>". O código
      compila para um JS equivalente, e não há uma interpretação em tempo de execução (runtime).
      Você pode usar qualquer biblioteca JavaScript existente com CoffeeScript sem problemas (e vice-versa).
      A saída compilada é legível e bem impressa, passa pelo <a href="http://www.javascriptlint.com/">JavaScript Lint</a>
      sem advertências, funcionará em qualquer <em>runtime</em> JavaScript, e tende a
      executar tão ou mais rápido que o JavaScript equivalente escrito a mão.
    </p>

    <p>
      <b>Versão Mais Recente:</b>
      <a href="http://github.com/jashkenas/coffee-script/tarball/1.3.3">1.3.3</a>
    </p>

    <p class="l8p">
      Traduzido para o português por
      <a href="http://loopinfinito.com.br" alt="Loop Infinito" title="Loop Infinito">Loop Infinito</a>
      (<a href="http://twitter.com/loopinfinito" alt="Loop Infinito no Twitter" title="Loop Infinito no Twitter">@loopinfinito</a>).
    </p>

    <h2>
      <span id="overview" class="bookmark"></span>
      Visão Geral
    </h2>

    <p><i>CoffeeScript à esquerda, saída compilada de JavaScript à direita.</i></p>

    <%= code_for('overview', 'cubes', false) %>

    <h2>
      <span id="installation" class="bookmark"></span>
      Instalação
    </h2>

    <p>
      O próprio compilador CoffeeScript é
      <a href="documentation/docs/grammar.html">escrito em CoffeeScript</a>,
      usando o <a href="http://jison.org">gerador de analisador (<i>parser</i>) Jison</a>. A
      versão linha de comando <tt>coffee</tt> está disponível como um
      utilitário <a href="http://nodejs.org/">Node.js</a>. O
      <a href="extras/coffee-script.js">compilador</a> entretanto, não
      depende do Node, e pode ser executado em qualquer ambiente JavaScript, ou no
      navegador (veja "Experimente CoffeeScript", acima).
    </p>

    <p>
      Para instalar, primeiramente tenha certeza de que tem uma cópia da última
      versão estável do <a href="http://nodejs.org/">Node.js</a>, e do <a href="http://npmjs.org">npm</a>
      (o Gerenciador de Pacotes do Node – <em>Node Package Manager</em>). Você então
      poderá instalar o CoffeeScript com o npm:
    </p>

    <pre>
npm install -g coffee-script</pre>

    <p>
      (Deixe de fora o <tt>-g</tt> caso não queira instalar globalmente.)
    </p>

    <p>
      Se preferir instalar a versão mais recente do CoffeeScript, você pode clonar o
      <a href="http://github.com/jashkenas/coffee-script">repositório do código fonte</a>
      do CoffeeScript no GitHub, ou fazer o download do
      <a href="http://github.com/jashkenas/coffee-script/tarball/master">código fonte</a> diretamente.
      Para instalar o compilador CoffeeScript para todo o sistema
      em <tt>/usr/local</tt>, abra o diretório e execute:
    </p>

  <pre>
sudo bin/cake install</pre>

    <h2>
      <span id="usage" class="bookmark"></span>
      Uso
    </h2>

    <p>
      Depois de instalado, você deverá ter acesso ao comando <tt>coffee</tt>,
      que pode executar scripts, compilar arquivos <tt>.coffee</tt> para <tt>.js</tt>,
      e fornecer um REPL (Read-Eval-Print-Loop) interativo. O comando <tt>coffee</tt>
      aceita as seguintes opções:
    </p>

    <table>
      <tr>
        <td><code>-c, --compile</code></td>
        <td>
          Compila um script <tt>.coffee</tt> para um arquivo JavaScript <tt>.js</tt>
          com o mesmo nome.
        </td>
      </tr>
      <tr>
        <td width="25%"><code>-i, --interactive</code></td>
        <td>
          Inicia uma sessão interativa de CoffeeScript para execução de pequenos trechos.
          Idêntico ao chamar <tt>coffee</tt> sem argumentos.
        </td>
      </tr>
      <tr>
        <td><code>-o, --output [DIR]</code></td>
        <td>
          Escreve todos os aquivos JavaScript compilados no diretório especificado.
          Use em conjunto com <tt>--compile</tt> ou <tt>--watch</tt>.
        </td>
      </tr>
      <tr>
        <td><code>-j, --join [FILE]</code></td>
        <td>
          Antes de compilar, concatena todos os scrips juntos na mesma ordem em que
          forem passados, e os escreve no arquivo especificdo.
          Útil na construção de grandes projetos.
        </td>
      </tr>
      <tr>
        <td><code>-w, --watch</code></td>
        <td>
          Observa os arquivos por modificações, reexecutando o comando especificdo
          quando qualquer arquivo for atualizado.
        </td>
      </tr>
      <tr>
        <td><code>-p, --print</code></td>
        <td>
          Em vez de escrever o JavaScript como um arquivo, imprime
          diretamente na <b>saída padrão</b> (stdout).
        </td>
      </tr>
      <tr>
        <td><code>-l, --lint</code></td>
        <td>
          Se o comando <tt>jsl</tt>
          (<a href="http://www.javascriptlint.com/">JavaScript Lint</a>)
          está instalado, use-o para verificar a compilação de um
          arquivo CoffeeScript. (Conveniente em conjunto com <br /> <tt>--watch</tt>)
        </td>
      </tr>
      <tr>
        <td><code>-s, --stdio</code></td>
        <td>
          Passa o CoffeeScript para STDIN e recupera o JavaScript pela STDOUT.
          Bom para uso com processos escritos em outras linguagens. Por exemplo:<br />
          <tt>cat src/cake.coffee | coffee -sc</tt>
        </td>
      </tr>
      <tr>
        <td><code>-e, --eval</code></td>
        <td>
          Compila e imprime um pequeno fragmento de CoffeeScript diretamente da
          linha de comando. Por exemplo:<br /><tt>coffee -e "console.log num for num in [10..1]"</tt>
        </td>
      </tr>
      <tr>
        <td><code>-r, --require</code></td>
        <td>
          Carrega uma biblioteca antes de compilar ou executar seu script. Pode ser
          usado para ligar algo ao compilador (para adicionar notificações Growl, por exemplo).
        </td>
      </tr>
      <tr>
        <td><code>-b, --bare</code></td>
        <td>
          Compila o JavaScript sem a
          <a href="#lexical_scope">função de segurança de alto nível</a>.
        </td>
      </tr>
      <tr>
        <td><code>-t, --tokens</code></td>
        <td>
          Em vez de realizar a análise sintática (parse) do CoffeeScript, apenas
          realiza a analise léxica e imprime o fluxo de tokens:
          <tt>[IDENTIFIER square] [ASSIGN =] [PARAM_START (]</tt> ...
        </td>
      </tr>
      <tr>
        <td><code>-n, --nodes</code></td>
        <td>
          Em vez de compilar o CoffeeScript, apenas realiza as análises léxica e sintática,
          e imprime a árvore sintática:
<pre class="no_bar">
Expressions
  Assign
    Value "square"
    Code "x"
      Op *
        Value "x"
        Value "x"</pre>
        </td>
      </tr>
      <tr>
        <td><code>--nodejs</code></td>
        <td>
          O executável <tt>node</tt> tem algumas opções úteis que você pode especificar,
          como <tt>--debug</tt>, <tt>--debug-brk</tt> e <tt>--max-stack-size</tt>. Use esta
          <em>flag</em> para passar as opções diretamente ao Node.js.
        </td>
      </tr>
    </table>

    <p>
      <b>Exemplos:</b>
    </p>

    <ul>
      <li>
        Compila uma árvore de diretório de arquivos <tt>.coffee</tt> em <tt>src</tt> em
        uma árvore paralela dos arquivos <tt>.js</tt> em <tt>lib</tt>:<br />
        <tt>coffee --compile --output lib/ src/</tt>
      </li>
      <li>
        Observa um arquivo por alterações, e o recompila toda vez que o arquivo é salvo:<br />
        <tt>coffee --watch --compile experimental.coffee</tt>
      </li>
      <li>
        Concatena uma lista de arquivos em um único script:<br />
        <tt>coffee --join project.js --compile src/*.coffee</tt>
      </li>
      <li>
        Imprime o JS compilado de uma linha:<br />
        <tt>coffee -bpe "alert i for i in [0..10]"</tt>
      </li>
      <li>
        Tudo junto agora, observa e recompila um projeto inteiro enquanto você trabalha nele:<br />
        <tt>coffee -o lib/ -cw src/</tt>
      </li>
      <li>
        Inicial o CoffeeScript REPL (<tt>Ctrl-D</tt> para sair, <tt>Ctrl-V</tt> para multi-linha):<br />
        <tt>coffee</tt>
      </li>
    </ul>

    <h2>
      <span id="language" class="bookmark"></span>
      Referência da Linguagem
    </h2>

    <p>
      <i>
        Esta referência está estruturada de maneira que possa ser lida de cima para
        baixo, se desejar. Ao decorrer do documento, as seções usam idéias e sintaxes anteriormente
        introduzidas. É necessário ter familiaridade com JavaScript. Em todos os
        exemplos seguintes, o código CoffeeScript é fornecido ao lado esquerdo,
        e a compilação direta para JavaScript está ao lado direito.
      </i>
    </p>

    <p>
      <i>
        Muitos dos exemplos podem ser executados (os que fazem sentido), pressionando
        o botão <b>executar</b> à direita, e pode ser carregado no console "Experimente CoffeeScript"
        pressionando o botão <b>carregar</b> do lado esquerdo.
      </i>
    <p>
      Primeiramente, o básico: CoffeeScript usa espaços em branco para delimitar blocos de código.
      Você não precisa usar ponto-e-vígulas <tt>;</tt> ao término de uma expressão,
      terminar a linha terá o mesmo resultado (embora ainda seja possível utilizar ponto-e-vírgula
      para delimitar várias expressões em uma mesma linha).
      Em vez de usar chaves <tt>{ }</tt> para agrupar blocos de código em <a href="#literals">funções</a>,
      <a href="#conditionals"><em>if</em></a>,
      <a href="#switch"><em>switch</em></a>, e <a href="#try">try/catch</a>,
      use indentação.
    </p>

    <p>
      Você não precisa usar parênteses para invocar uma função se você estiver
      passando argumentos. A chamada agrupa implicitamente até o fim da linha ou da expressão de bloco.<br />
      <tt>console.log sys.inspect object</tt> &rarr; <tt>console.log(sys.inspect(object));</tt>
    </p>

    <p>
      <span id="literals" class="bookmark"></span>
      <b class="header">Funções</b>
      Funções são definidas por uma lista de parâmetros opcionais entre parênteses,
      uma seta, e o corpo da função. A função vazia parece assim: <tt>-></tt>
    </p>
    <%= code_for('functions', 'cube(5)') %>
    <p>
      Funções também podem ter valores padrão para argumentos. Sobrescreva o valor
      padrão passando um argumento não nulo.
    </p>
    <%= code_for('default_args', 'fill("cup")') %>

    <p>
      <span id="objects_and_arrays" class="bookmark"></span>
      <b class="header">Objetos e Arrays</b>
      Os literias de CoffeeScript para objetos e <em>arrays</em> se parecem bastante
      com seus primos JavaScript. Quando cada propriedade é listada em sua própria
      linha, as vírgulas são opcionais. Objetos devem ser criados usando indentação
      em vez de chaves explícitas, similar ao <a href="http://yaml.org">YAML</a>.
    </p>
    <%= code_for('objects_and_arrays', 'song.join(" ... ")') %>
    <p>
      Em JavaScript, você não pode usar palavras reservadas, como <tt>class</tt>, como
      propriedades de um objeto, sem envolvê-las com aspas como <em>strings</em>.
      CoffeeScript reconhece palavras reservadas usadas como chave (<i>key</i>) em um objeto
      e coloca aspas nelas para você, então você não precisa se preocupar com isso
      (por exemplo, quando usando jQuery).
    </p>
    <%= code_for('objects_reserved') %>

    <p>
      <span id="lexical_scope" class="bookmark"></span>
      <b class="header">Escopo Léxico e Segurança de Variáveis</b>
      O compilador CoffeeScript tem o cuidado de se certificar que todas as suas
      variáveis estão propriamente declaradas dentro de um escopo léxico &mdash;
      você mesmo nunca precisa escrever <tt>var</tt>.
    </p>
    <%= code_for('scope', 'inner') %>
    <p>
      Note como todas as declarações de variável foram colocadas no começo do
      escopo mais próximo, a primeira vez que elas aparecem.
      <b>outer</b> não está declarada dentro da função, porque ela já está no
      escopo; <b>inner</b> dentro da função, por outro lado, não deve ser capaz
      de mudar o valor da variável externa de mesmo nome, e portanto tem uma
      própria declaração.
    </p>
    <p>
      Este comportamento é efetivamente idêntico ao escopo de Ruby para variáveis
      locais. Pelo fato de você não ter acesso direto à palavra-chave <tt>var</tt>,
      é impossível esconder uma variável externa de propósito, você deve apenas
      se referir a ela. Então tenha cuidado com o reuso de um nome de variável
      externa acidentalmente, principalmente se você estiver escrevendo uma função
      profundamente aninhada.
    </p>
    <p>
      Embora suprimida nesta documentação para maior clareza, toda saída CoffeeScript é
      empacotada em uma função anônima: <tt>(function(){ ... })();</tt> Este
      empacotador seguro, combinado com a geração automática da palavra-chave
      <tt>var</tt>, faz com que seja extremamente difícil de poluir os espaços
      de nomes (<i>namespaces</i>) globais por acidente.
    </p>
    <p>
      Se você quiser criar variáveis de nível superior para outros scripts usarem,
      anexe-as como propriedades em <b>window</b>, ou no objeto <b>exports</b> em
      CommonJS. O <b>operador existencial</b> (mostrado abaixo), fornece a você uma
      forma confiável de descobrir onde adicioná-las; se você quiser as duas coisas
      (CommonJS e o navegador): <tt>exports ? this</tt>
    </p>

    <p>
      <span id="conditionals" class="bookmark"></span>
      <b class="header">If, Else, Unless, e Atribuição Condicional</b>
      Declarações <b>If/else</b> podem ser escritas sem o uso de parênteses e chaves.
      Assim como funções e outras expressões de bloco, condicionais multi-linha são
      delimitados por indentação. Também existe uma forma pós-fixa, com o <tt>if</tt>
      ou <tt>unless</tt> ao final.
    </p>
    <p>
      CoffeeScript pode compilar declarações <b>if</b> para expressões JavaScript,
      usando o operador ternário quando possível, e blocos de chaves caso contrário.
      Não existe declaração ternária explícita em CoffeeScript &mdash; você simplesmente
      usa uma declaração <b>if</b> normal em uma mesma linha.
    </p>
    <%= code_for('conditionals') %>

    <p>
      <span id="splats" class="bookmark"></span>
      <b class="header">Splats...</b>
      O <b>objeto de argumentos</b> de JavaScript é uma maneira útil de trabalhar
      com funções que aceitam um número variado de argumentos. CoffeeScript fornece
      <em>splats</em> <tt>...</tt>, tanto para definições de função quanto para
      invocações, fazendo com que o número variável de argumentos seja um pouco
      mais saboroso.
    </p>
    <%= code_for('splats', true) %>

    <p>
      <span id="loops" class="bookmark"></span>
      <b class="header">Laços e Compreensões de Listas</b>
      A maioria dos laços (<em>loops</em>) que você escreverá em CoffeeScript serão
      <b>compreensões de listas</b> (<i>list comprehensions</i>) em <em>arrays</em>, objetos, e intervalos (<em>ranges</em>).
      Compreensões de listas substituem (e compilam para) laços <b>for</b>, com
      cláusulas <em>guard</em> opcionais e o valor atual do índice do <em>array</em>.
      Diferente de laços, as <b>compreensões</b> são expressões, e podem ser retornadas
      e atribuídas.
    </p>
    <%= code_for('array_comprehensions') %>
    <p>
      Compreensões devem ser capazes de lidar com a maioria dos casos onde você
      de outra maneira usaria um laço normal, <b>each</b>/<b>forEach</b>, <b>map</b>,
      ou <b>select</b>/<b>filter</b>, por exemplo:
      <tt>shortNames = (name for name in list when name.length &lt; 5)</tt><br />
      Se você sabe o começa e termina o laço, ou gostaria de percorrer o laço
      com incrementos de tamanho fixo, você pode usar um intervalo (<em>range</em>)
      para especificar o começo e o fim das suas <b>compreensões</b>.
    </p>
    <%= code_for('range_comprehensions', 'countdown') %>
    <p>
      Peceba que, pelo fato de estarmos atribuindo o valor das compreensões de lista
      (<i>list comprehension</i>) a uma variável no exemplo acima, CoffeeScript coleta
      o resultado de cada iteração em um <em>array</em>. Às vezes funções terminam com
      laços que servem apenas para rodar no contexto da própria função. Tenha
      cuidado para não retornar acidentalmente os resultados da compreensão, nestes casos
      apenas adicione um valor de retorno significativo &mdash; como <tt>true</tt>
      &mdash; ou <tt>null</tt>, ao final da sua função.
    </p>
    <p>
      Para percorrer uma compreensão de intervalo em passos de tamanho fixo,
      use <tt>by</tt>, por exemplo:<br />
      <tt>pares = (x for x in [0..10] by 2)</tt>
    </p>
    <p>
      Compreensões também podem ser usadas para iterar sobre as chaves (<em>key</em>) e valores (<em>value</em>)
      em um objeto. Use <tt>of</tt> para sinalizar a compreensão sobre as propriedades
      de um objeto, em vez dos valores em um <em>array</em>.
    </p>
    <%= code_for('object_comprehensions', 'ages.join(", ")') %>
    <p>
      Se desejar iterar somente sobre as chaves (<em>keys</em>) que são
      definidas no próprio objeto adicione uma verificação <tt>hasOwnProperty</tt>
      ,para evitar propriedades que possam ter sido herdadas do protótipo use<br />
      <tt>for own key, value of object</tt>
    </p>
    <p>
      O único laço de baixo nível que CoffeeScript fornece é o laço <b>while</b>. A
      principal diferença de JavaScript é que o laço <b>while</b> pode ser usado como
      uma expressão, retornando um <em>array</em> contendo o resultado de cada iteração
      atravéz do laço.
    </p>
    <%= code_for('while', 'lyrics.join("\n")') %>
    <p>
      Para legibilidade, a palavra-chave <b>until</b> é equivalente a <tt>while not</tt>,
      e a palavra-chave <b>loop</b> é equivalente a <tt>while true</tt>.
    </p>
    <p>
      Quando usando um laço JavaScript para gerar funções, é comum inserir um
      invólucro (<em>wrapper</em>) a fim de garantir que as variáveis do laço estejam
      corretamente fechadas, e todas as funções geradas não compartilhem apenas
      os valores finais. CoffeeScript fornece a palavra-chave <tt>do</tt>, que invoca
      imediatamente uma função passada com seus respectivos argumentos.
    </p>
    <%= code_for('do') %>
    <p>
      <span id="slices" class="bookmark"></span>
      <b class="header">Fatiamento e Substituição com Intervalos de Arrays</b>
      Intervalos (<em>ranges</em>) também podem ser usados para extrair fatias
      (<em>slices</em>) de <em>arrays</em>.
      Com dois pontos (<tt>3..6</tt>), o intervalo é inclusivo (<tt>3, 4, 5, 6</tt>);
      Com trêz pontos (<tt>3...6</tt>), o intervalo exclui o final (<tt>3, 4, 5</tt>).
      Índices de fatias têm padrões úteis. Se o primeiro índice for omitido, terá o
      mesmo efeito que ter sido setado com <tt>0</tt>, e se o segundo índice for omitido,
      terá o mesmo efeito que ter sido setado com o tamanho do <em>array</em>.
    </p>
    <%= code_for('slices', 'middle') %>
    <p>
      A mesma sintaxe pode ser usada com atribuição para substituir um segmento de
      um <em>array</em> com novos valores, "emendando-o" (<em>splice</em>).
    </p>
    <%= code_for('splices', 'numbers') %>
    <p>
      Perceba que <em>strings</em> JavaScript são imutáveis, e não podem ser "emendadas".
    </p>
    <p>
      <span id="expressions" class="bookmark"></span>
      <b class="header">Tudo é uma Expressão (pelo menos, o tanto quanto possível)</b>
      Você deve ter notado que apesar de não termos adicionado declarações de
      retorno às funções CoffeeScript, mesmo assim elas retornam seu valor final.
      O compilador CoffeeScript tenta se assegurar que todas as declarações na
      linguagem possam ser usadas como expressões. Veja como o <tt>return</tt>
      acaba indo parar no final de cada ramo possível de execução na função abaixo.
    </p>
    <%= code_for('expressions', 'eldest') %>
    <p>
      Apesar de funções sempre retornarem seu valor final, é possível e encorajado
      retornar o mais depressa possível de um corpo de função escrevendo explicitamente
      <em>return</em> (<tt>return value</tt>).
    </p>
    <p>
      Pelo fato das declarações de variável ocorrerem no topo do escopo,
      pode ser usado atribuição dentro de expressões, até mesmo para variáveis que não foram
      vistas antes:
    </p>
    <%= code_for('expressions_assignment', 'six') %>
    <p>
      Coisas que poderiam, de outra maneira, ser declarações em JavaScript quando
      usadas como uma parte de uma expressão em CoffeeScript, são convertidas em
      expressões agrupando-as em um bloco. Isto permite a você fazer coisas úteis,
      como atribuir o resultado de uma compreensão de lista a uma variável:
    </p>
    <%= code_for('expressions_comprehension', 'globals') %>
    <p>
      Bem como coisas bobas, como passar uma declaração <b>try/catch</b> diretamente
      em uma chamada de função:
    </p>
    <%= code_for('expressions_try', true) %>
    <p>
      Há um punhado de instruções em JavaScript que não podem ser verdadeiramente
      convertidas em expressões, como <tt>break</tt>, <tt>continue</tt>,
      e <tt>return</tt>. Se você faz uso delas dentro de um bloco de código,
      CoffeeScript não tentará realizar a conversão.
    </p>

    <p>
      <span id="operators" class="bookmark"></span>
      <b class="header">Operadores e Aliases</b>
      Pelo fato de o operador <tt>==</tt> frequentemente causar coerção indesejável,
      é intransitivo, e tem um significado diferente do que em outras linguagens,
      CoffeeScript compila <tt>==</tt> para <tt>===</tt>, e <tt>!=</tt> para
      <tt>!==</tt>.
      Além disso, <tt>is</tt> compila para <tt>===</tt>, e <tt>isnt</tt> para
      <tt>!==</tt>.
    </p>
    <p>
      Você pode usar <tt>not</tt> como um apelido (<em>alias</em>) para <tt>!</tt>.
    </p>
    <p>
      Por lógica, <tt>and</tt> compila para <tt>&amp;&amp;</tt>, e <tt>or</tt>
      para <tt>||</tt>.
    </p>
    <p>
      Em vez de uma nova linha ou ponto-e-vígula, <tt>then</tt> pode ser usado
      para separar condições de expressões, em instuções <b>while</b>,
      <b>if</b>/<b>else</b>, e <b>switch</b>/<b>when</b>.
    </p>
    <p>
      Como em <a href="http://yaml.org/">YAML</a>, <tt>on</tt> e <tt>yes</tt>
      são o mesmo booleano <tt>true</tt>, enquanto <tt>off</tt> e <tt>no</tt> são o
      booleano <tt>false</tt>.
    </p>
    <p>
      <tt>unless</tt> pode ser usado como o inverso de <tt>if</tt>.
    </p>
    <p>
      Como um atalho para <tt>this.propriedade</tt>, você pode usar <tt>@propriedade</tt>.
    </p>
    <p>
      Você pode usar <tt>in</tt> para testar a presença em <em>array</em>, e <tt>of</tt>
      para testar a presença de chave (<em>key</em>) de objeto JavaScript.
    </p>

    <p>
      Tudo junto agora:
    </p>

    <table class="definitions">
      <tr><th>CoffeeScript</th><th>JavaScript</th></tr>
      <tr><td><tt>is</tt></td><td><tt>===</tt></td></tr>
      <tr><td><tt>isnt</tt></td><td><tt>!==</tt></td></tr>
      <tr><td><tt>not</tt></td><td><tt>!</tt></td></tr>
      <tr><td><tt>and</tt></td><td><tt>&amp;&amp;</tt></td></tr>
      <tr><td><tt>or</tt></td><td><tt>||</tt></td></tr>
      <tr><td><tt>true, yes, on</tt></td><td><tt>true</tt></td></tr>
      <tr><td><tt>false, no, off</tt></td><td><tt>false</tt></td></tr>
      <tr><td><tt>@, this</tt></td><td><tt>this</tt></td></tr>
      <tr><td><tt>of</tt></td><td><tt>in</tt></td></tr>
      <tr><td><tt>in</tt></td><td><i><small>sem equivalente JS</small></i></td></tr>
    </table>

    <%= code_for('aliases') %>

    <p>
      <b class="header">O Operador Existencial</b>
      É um pouco difícil de verificar a existência de uma variável em
      JavaScript. <tt>if (variavel) ...</tt> chega perto, mais falha para
      zero (<tt>0</tt>), <em>string</em> vazia (<tt>""</tt>) e falso (<tt>false</tt>).
      O operador existencial de CoffeeScript <tt>?</tt> retorna verdadeiro a menos
      que a variável seja <b>null</b> ou <b>undefined</b>, o que a faz análoga
      ao <tt>nil?</tt> de Ruby.
    </p>
    <p>
      Ele também pode ser usado para atribuição condicional com mais segurança que
      <tt>||=</tt> fornece, para casos onde você tenha que lidar com números ou <em>strings</em>.
    </p>
    <%= code_for('existence', 'footprints') %>
    <p>
      A variante do operador existencial <tt>?.</tt> pode ser usada para absorver
      referências nulas em uma cadeia de propriedades. Use-o no lugar do operador
      <tt>.</tt> nos casos onde o valor base pode ser <b>null</b> ou <b>undefined</b>.
      Se todas a propriedades existem então você terá o resultado esperado, se a cadeia
      estiver quebrada, <b>undefined</b> é retornado em vez de <b>TypeError</b> que seria
      o normal.
    </p>
    <%= code_for('soaks') %>
    <p>
      Absorver valores nulos (<em>null</em>) é similar ao
      <a href="http://andand.rubyforge.org/">andand gem</a> de Ruby, e ao
      <a href="http://groovy.codehaus.org/Operators#Operators-SafeNavigationOperator%28%3F.%29">safe navigation operator</a>
      em Groovy.
    </p>

    <p>
      <span id="classes" class="bookmark"></span>
      <b class="header">Classes, Herança, and Superclasses</b>
      A herança prototipada de JavaScript sempre foi um pouco confusa, com toda
      uma árvore genealógica de bibliotecas que fornecem uma sintaxe mais clara
      para herança clássica no topo dos protótipos JavaScript:
      <a href="http://code.google.com/p/base2/">Base2</a>,
      <a href="http://prototypejs.org/">Prototype.js</a>,
      <a href="http://jsclass.jcoglan.com/">JS.Class</a>, etc.

      As bibliotecas oferecem um "açúcar sintático" (<i>syntatic sugar</i>), e a herança padrão seria
      completamente utilizável se não fosse por umas pequenas exceções:
      é estranho chamar a <b>superclasse</b> (a implementação do protótipo do objeto da
      função atual), e é estranho utilizar a cadeia de protótipo corretamente.
    </p>
    <p>
      Em vez de anexar funções a um protótipo repetidamente, CoffeeScript fornece
      uma estrutura básica <tt>class</tt> que permite a você nomear sua classe,
      setar a superclasse, atribuir propriedades de protótipo, e definir o
      construtor em uma única expressão atribuível.
    </p>
    <p>
      Funções construtoras são nomeadas, para melhor apoiar os rastreamentos úteis
      de pilha (<i>stack trace</i>. Na primeira classe no exemplo abaixo, <tt>this.constructor.name</tt> is "Animal".
    </p>
    <%= code_for('classes', true) %>
    <p>
      Se estruturar seus protótipos da maneira clássica não é sua praia, CoffeeScript
      fornece umas conveniências de baixo nível. O operador <tt>extends</tt> ajuda
      com a configuração de protótipo adequada, e pode ser usado para criar uma cadeia
      de herança entre qualquer par de funções construtoras; <tt>::</tt> lhe dá
      acesso rápido a uma propriedade de objeto; e <tt>super()</tt> é convertido em
      uma chamada direta ao método com o mesmo nome do seu ancestral (superclasse).
    </p>
    <%= code_for('prototypes', '"one_two".dasherize()') %>
    <p>
      Finalmente, definições de classe são blocos de código executável, o que faz com
      que as possibilidades de metaprogramação se tornem interessantes. Por causa do
      contexto de uma definição de classe, <tt>this</tt> é o próprio objeto de classe
      (a função construtora), você pode atribuir propriedades estáticas usando <br />
      <tt>@property: value</tt>, e chamar funções definidas em classes pai:
      <tt>@attr 'title', type: 'text'</tt>.
    </p>

    <p>
      <span id="destructuring" class="bookmark"></span>
      <b class="header">Atribuição de Troca</b>
      Para fazer com que a extração de valores de <em>arrays</em> e objetos complexos
      mais conveniente, CoffeeScript implementa a sintaxe
      <a href="http://wiki.ecmascript.org/doku.php?id=harmony:destructuring">destructuring assignment</a>
      proposta pelo ECMAScript Harmony. Quando você atribui um <em>array</em> ou objeto
      para um valor, CoffeeScript se fragmenta e combina os dois lados, atribuindo
      os valores da direita às variáveis da esquerda. De maneira mais simples, pode
      ser usado para atribuição paralela:
    </p>
    <%= code_for('parallel_assignment', 'theBait') %>
    <p>
      Mas também é bastante útil para lidar com funções que retornam multiplos valores.
    </p>
    <%= code_for('multiple_return_values', 'forecast') %>
    <p>
      Atribuição de troca (<i>Destructuring assignment</i>) pode ser usada com qualquer
      profundidade de <em>array</em> ou aninhamento de objeto, para ajudar a extrair
      propriedades profundamente aninhadas.
    </p>
    <%= code_for('object_extraction', 'name + " - " + street') %>
    <p>
      Atribuição de troca pode até ser combinada com <em>splats</em>.
    </p>
    <%= code_for('patterns_and_splats', 'contents.join("")') %>

    <p>
      <span id="fat_arrow" class="bookmark"></span>
      <b class="header">Vinculação de Funções</b>
      Em JavaScript, a palavra-chave <tt>this</tt> é dinamicamente "escopada" para
      que o objeto seja referente a função da qual ele está vinculado. Se você passar
      uma função como um <i>callback</i> ou vinculá-la a um objeto diferente, o
      valor original de <tt>this</tt> será perdido. Se você não está familiarizado
      com este comportamento,
      <a href="http://www.digital-web.com/articles/scope_in_javascript/">este artigo</a>
      fornece uma boa visão dessas peculiaridades.
    </p>
    <p>
      A seta dupla <tt>=&gt;</tt> pode ser usada tanto para definir uma função quanto
      para vinculá-la ao valor atual de <tt>this</tt> no lugar certo. Isto é útil
      quando usamos bibliotecas baseadas em <em>callbacks</em> como Prototype ou jQuery,
      para criar funções iteradoras para passar para <tt>each</tt>, ou para funções
      manipuladoras de eventos usarem com <tt>bind</tt>. Funções criadas com a seta
      dupla são capazes de acessar propriedades do <tt>this</tt> onde elas são definidas.
    </p>
    <%= code_for('fat_arrow') %>
    <p>
      Se tivéssemos usado <tt>-&gt;</tt> no <i>callback</i> acima, <tt>@customer</tt>
      teria se referido à propriedade "customer" indefinida do elemento DOM, e tentado
      chamar <tt>purchase()</tt> nela teria gerado uma exceção.
    </p>
    <p>
      Quando usados em uma definição de classe, métodos declarados com a seta dupla
      serão automaticamente vinculados a cada instância da classe quando a instância
      for construída.
    </p>

    <p>
      <span id="embedded" class="bookmark"></span>
      <b class="header">JavaScript Embutido</b>
      Provavelmente, você nunca precisará utilizar isso, mas se você precisar
      intercalar fragmentos de JavaScript dentro do seu CoffeeScript, pode utilizar
      crases para incluí-los diretamente.
    </p>
    <%= code_for('embedded', 'hi()') %>

    <p>
      <span id="switch" class="bookmark"></span>
      <b class="header">Switch/When/Else</b>
      Instruções <b>switch</b> em JavaScript são um pouco inconvenientes. Você
      se lembrar de incluir um <b>break</b> ao final de toda instrução <b>case</b>
      para evitar de cair no <em>case</em> padrão (<i>default</i>) acidentalmente.
      CoffeeScript impede essa caída acidental, e pode converter o <tt>switch</tt>
      em expressões retornáveis e atribuíveis. O formato é: codição <tt>switch</tt>,
      cláusulas <tt>when</tt> e cláusulas <tt>else</tt> como o <em>case</em> padrão.
    </p>
    <p>
      Como em Ruby, instruções <b>switch</b> em CoffeeScript podem ter multiplos
      valores para cada cláusula <b>when</b>. Se qualquer um dos valores casar, a
      cláusula é executada.
    </p>
    <%= code_for('switch') %>

    <p>
      <span id="try" class="bookmark"></span>
      <b class="header">Try/Catch/Finally</b>
      Instruções try/catch são as mesmas do JavaScript (contudo, funcionam como
      expressões).
    </p>
    <%= code_for('try') %>

    <p>
      <span id="comparisons" class="bookmark"></span>
      <b class="header">Comparações em Cadeia</b>
      CoffeeScript pega emprestado as
      <a href="http://docs.python.org/reference/expressions.html#not-in">comparações em cadeia (em inglês)</a>
      de Python &mdash; facilitando testar se um valor está dentro de um
      determinado intervalo.
    </p>
    <%= code_for('comparisons', 'healthy') %>

    <p>
      <span id="strings" class="bookmark"></span>
      <b class="header">Interpolação de String, Blocos de String e Blocos de Comentário</b>
      A interpolação de <em>string</em> no estilo Ruby está incluída no CoffeeScript.
      <em>Strings</em> de aspas duplas permitem valores interpolados usando <tt>#{ ... }</tt>,
      e aspas simples são apenas <em>strings</em> literais.
    </p>
    <%= code_for('interpolation', 'sentence') %>
    <p>
      <em>Strings</em> multi-linha são permitidas em CoffeeScript.
    </p>
    <%= code_for('strings', 'mobyDick') %>
    <p>
      Blocos de <em>strings</em> podem ser usadas para armazenar texto formatado
      ou indentado (ou, se você apenas não gosta de escapar aspas e apóstrofos).
      O nível de indentação que começa o bloco é mantido do começo ao fim, então
      você pode manter tudo alinhado com o corpo do seu código.
    </p>
    <%= code_for('heredocs', 'html') %>
    <p>
      Blocos de <em>strings</em> de aspas duplas, assim como qualquer <em>string</em>
      de aspas duplas, também permitem interpolação.
    </p>
    <p>
      Às vezes você pode querer passar um bloco de comentário para o JavaScript
      gerado. Por exemplo, quando você precisa embutir um cabeçalho de licenciamento
      no topo de um arquivo. Comentários em bloco, que refletem a sintaxe de
      <em>strings</em> em bloco, são preservados no código gerado.
    </p>
    <%= code_for('block_comment') %>

    <p>
      <span id="regexes" class="bookmark"></span>
      <b class="header">Blocos de Expressões Regulares</b>
      De forma similar aos blocos de <em>strings</em> e comentários, CoffeeScript também
      suporta blocos de expressões regulares (regexes) &mdash; expressões regulares
      extendidas que ignoram espaços em branco internos e que podem conter comentários
      e interpolação. Modelado de forma similiar ao modificador <tt>/x</tt> de Perl, os blocos de
      expressão regular do CoffeeScript são delimitados por <tt>///</tt> e fazem com
      que as expressões regulares se tornem legíveis. Veja o exemplo abaixo:
    </p>
    <%= code_for('heregexes') %>

    <h2>
      <span id="cake" class="bookmark"></span>
      Cake, e Cakefiles
    </h2>

    <p>
      CoffeeScript inclui um sistema de construção (<em>build system</em>) muito
      simples parecido com o <a href="http://www.gnu.org/software/make/">Make</a>
      e o <a href="http://rake.rubyforge.org/">Rake</a>. Naturalmente, ele é
      chamado de Cake, e é usado pelas tarefas que constroem e testam a própria
      linguagem CoffeeScript. Tarefas (<em>tasks</em>) são definidas em um arquivo
      chamado de <tt>Cakefile</tt>, e podem ser invocadas chamando <tt>cake [tarefa]</tt>
      de dentro do diretório. Para imprimir uma lista de todas as tarefas e opções,
      basta digitar <tt>cake</tt>.
    </p>

    <p>
      Definições de tarefas são escritas em CoffeeScript, assim você pode incluir
      código arbitrário em seu Cakefile. Defina uma tarefa com um nome, uma descrição,
      e a função que será invocada quando a tafera for executada. Se sua tarefa
      tem uma opção de linha de comando, você pode definir a opção com <em>flags</em>
      curtos e longos, e ela ficará disponível on objeto <tt>options</tt>. Abaixo
      há uma tarefa que usa a API Node.js para reconstruir o analizador sintático
      do CoffeeScript:
    </p>
    <%= code_for('cake_tasks') %>
    <p>
      Se você precisa executar uma tarefa antes de outra &mdash; por exemplo, rodando
      <tt>build</tt> antes de <tt>test</tt>, você pode utilizar a função <tt>invoke</tt>:
      <tt>invoke 'build'</tt>. Tarefas <em>cake</em> são uma maneira minimalista de
      expor suas funções CoffeeScript na linha de comando, então
      <a href="documentation/docs/cake.html">não nada muito extravagante</a>.
      Se você precisa de dependências, ou de <em>callbacks</em> assíncronos, é melhor
      você mesmo colocá-los em seu código &mdash; e não a tarefa <em>cake</em>.
    </p>

    <h2>
      <span id="scripts" class="bookmark"></span>
      Tags de script "text/coffeescript"
    </h2>

    <p>
      Mesmo não sendo recomendável para uso em produção, códigos CoffeeScript podem ser
      incluídos diretamente no navegador usando <em>tags</em> <tt>&lt;script type="text/coffeescript"&gt;</tt>.
      O código fonte inclui uma versão compactada e minificada do compilador
      (<a href="extras/coffee-script.js">Faça o download da versão atual, 39k em gzip</a>)
      como em <tt>extras/coffee-script.js</tt>. Inclua este arquivo na página com as
      <em>tags inline</em> do CoffeeScript, e ele irá compilar e validar os <em>scripts</em> –
      nesta ordem.
    </p>

    <p>
      Na verdade, o pequeno <em>script</em> que executa "Experimente CoffeeScript"
      acima, assim como o jQuery do menu, é implementado exatamente dessa maneira.
      Abra o código fonte e olhe para o final da página para ver o exemplo.
      Incluir o <em>script</em> também lhe dá acesso ao <tt>CoffeeScript.compile()</tt>
      assim você pode abrir o <em>Firebug</em> – ou o <em>Inspector</em> no Chrome –
      e tentar compilar algumas <em>strings</em>.
    </p>

    <p>
      As advertências comuns sobre a aplicação de CoffeeScript &mdash; seus
      <em>scripts inline</em> serão executados dentro de um ambiente separado,
      então se você quiser expor variáveis ou funções globais, vincule-as ao
      objeto <tt>window</tt>.
    </p>

    <h2>
      <span id="resources" class="bookmark"></span>
      Livros
    </h2>

    <p>
      Existem vários meios excelentes para ajudá-lo a começar com CoffeeScript,
      alguns deles estão disponíveis <em>online</em> gratuitamente.
    </p>

    <ul>
      <li>
        <a href="http://arcturo.github.com/library/coffeescript/">The Little Book on CoffeeScript</a>
        é uma breve introdução ao CoffeeScript de 5 capítulos, escrito com
        grande clareza e precisão por <a href="http://alexmaccaw.co.uk/">Alex MacCaw</a>.
      </li>
      <li>
        <a href="http://autotelicum.github.com/Smooth-CoffeeScript/">Smooth CoffeeScript</a>
        é uma releitura do excelente livro
        <a href="http://eloquentjavascript.net/">Eloquent JavaScript</a>, caso
         tivesse sido escrito em CoffeeScript. Aborda recursos da linguagem
        assim como estilos de programação funcional e orientada a objeto. Por
        <a href="https://github.com/autotelicum">E. Hoigaard</a>.
      </li>
      <li>
        <a href="http://pragprog.com/book/tbcoffee/coffeescript">CoffeeScript: Accelerated JavaScript Development</a>
        é a introdução completa de <a href="http://trevorburnham.com/">Trevor Burnham</a>
        à linguagem. No final do livro, você terá construído um rápido jogo de palavras
        <em>multiplayer</em>, escrevendo tanto o lado do cliente (<em>client-side</em>)
        tanto quanto o lado do servidor (Node.js) com CoffeeScript.
      </li>
    </ul>

    <h2>
      Screencasts
    </h2>

    <ul>
      <li>
        <a href="http://coffeescript.codeschool.com">A Sip of CoffeeScript</a> é um <a href="http://www.codeschool.com">Curso do Code School</a>
        que combina 6 <em>screencasts</em> com programação dentro do navegador para
        tornar o aprendizado divertido. O primeiro nível é grátis para experimentar.
      </li>
      <li>
        <a href="http://peepcode.com/products/coffeescript">Meet CoffeeScript</a>
        é um <em>screencast</em> longo de 75 minutos feito por <a href="http://peepcode.com/">PeepCode</a>.
        Altamente memorável por suas animações que demonstram a transformação do
        CoffeeScript no equivalente em JS.
      </li>
      <li>
        Se você está procurando por um empenho de menos tempo,
        <a href="http://railscasts.com/episodes/267-coffeescript-basics">CoffeeScript Basics</a>
        do RailsCasts deve lhe deixar por dentro, abordando todas os aspectos importantes
        do CoffeeScript em 11 minutos.
      </li>
    </ul>

    <h2>
      Exemplos
    </h2>

    <p>
      A <a href="https://github.com/languages/coffeescript">melhor lista
      de exemplos CoffeeScript <em>open-source</em></a> pode ser encontrada no GitHub.
      Mais alguns:
    </p>

    <ul>
      <li>
        <a href="http://hubot.github.com/">Hubot</a> do <b>github</b>,
        um robô amigável de IRC que pode realizar qualquer número de tarefas úteis e inúteis.
      </li>
      <li>
        <a href="http://pow.cx/">Pow</a> do <b>sstephenson</b>,
        um servidor Rack, com código fonte anotado de forma compreensiva.
      </li>
      <li>
        <a href="http://riakjs.org/">riak-js</a> do <b>frank06</b>, um cliente Node.js para
        <a href="http://www.basho.com/Riak.html">Riak</a>, com suporte para protocolo
        HTTP e <em>Buffers</em> de protocolo.
      </li>
      <li>
        <a href="https://github.com/technoweenie/coffee-resque">Coffee-Resque</a> do <b>technoweenie</b>,
        um <i>port</i> do <a href="https://github.com/defunkt/resque">Resque</a> para Node.js.
      </li>
      <li>
        <a href="http://zombie.labnotes.org/">Zombie.js</a> do <b>assaf</b>,
        uma biblioteca sem chefe, <em>full-stack</em>, <em>faux-browser</em> de teste para Node.js.
      </li>
      <li>
        <a href="documentation/docs/underscore.html">Underscore.coffee</a> do <b>jashkenas</b>, um <i>port</i>
        da biblioteca <a href="http://documentcloud.github.com/underscore/">Underscore.js</a>
        de funções <em>helpers</em>.
      </li>
      <li>
        <a href="https://github.com/stephank/orona">Orona</a> do <b>stephank</b>, uma reconstrução
        do jogo <em>Bolo tank</em> para navegadores modernos.
      </li>
      <li>
        <a href="http://josh.github.com/nack/">nack</a> do <b>josh</b>, um servidor
        <a href="http://rack.rubyforge.org/">Rack</a> em Node.js.
      </li>
    </ul>

    <h2>
      Recursos
    </h2>

    <ul>
      <li>
        <a href="http://github.com/jashkenas/coffee-script/">Código Fonte</a><br />
        Use <tt>bin/coffee</tt> para testar modifições,<br />
        <tt>bin/cake test</tt> para executar o pacote,<br />
        <tt>bin/cake build</tt> para reconstruir o compilador CoffeeScript, e <br />
        <tt>bin/cake build:parser</tt> para regerar o <em>parser</em> Jison se você estiver
        trabalhando na gramática. <br /><br />
        <tt>git checkout lib &amp;&amp; bin/cake build:full</tt> é um bom comando para executar
        quando você estiver trabalhando no núcleo na linguagem. Ele irá atualizar o diretório
        lib (no caso de você ter danificado algo), construir seu compilador alterado, usar
        ele para reconstruir a si mesmo (um bom teste de sanidade) e então executar todos
        os testes. Se os testes passarem, há uma grande chance de você ter feito uma alteração
        com sucesso.
      </li>
      <li>
        <a href="http://github.com/jashkenas/coffee-script/issues">CoffeeScript Issues</a><br />
        Relatos de <em>bug</em>, propostas de funcionalidades, e idéias para mudanças na
        linguagem.
      </li>
      <li>
        <a href="https://groups.google.com/forum/#!forum/coffeescript">CoffeeScript Google Group</a><br />
        Se você quiser fazer uma pergunta, a lista de e-mails é um bom lugar para arranjar ajuda.
      </li>
      <li>
        <a href="http://github.com/jashkenas/coffee-script/wiki">O Wiki CoffeeScript</a><br />
        Se você já aprendeu algo útil ou algum truque com CoffeeScript, ou fez alguma pegadinha
        &mdash; compartilhe no wiki.
        O wiki também serve como um diretório de
        <a href="http://github.com/jashkenas/coffee-script/wiki/Text-editor-plugins">extensões de editores de texto</a>,
        <a href="http://github.com/jashkenas/coffee-script/wiki/Web-framework-plugins">plugins de frameworks web</a>,
        e geralmente <a href="http://github.com/jashkenas/coffee-script/wiki/Build-tools">ferramenta de construção CoffeeScript</a>.
      </li>
      <li>
        <a href="http://github.com/jashkenas/coffee-script/wiki/FAQ">O FAQ</a><br />
        Talvez suas dúvidas em relação ao CoffeeScript já tenham sido respondidas. Verifique o FAQ antes.
      </li>
      <li>
        <a href="https://github.com/jashkenas/coffee-script/downloads">Logotipo de alta resolução</a><br />
        O logo do CoffeeScript está disponível nos formatos Adobe Illustrator, EPS e PSD,
        para uso em apresentações.
      </li>
    </ul>

    <h2>
      <span id="webchat" class="bookmark"></span>
      Web Chat (IRC)
    </h2>

    <p>
      Ajuda rápida e conselhos podem ser encontrados no canal de IRC CoffeeScript.
      Entre em <tt>#coffeescript</tt> em <tt>irc.freenode.net</tt>, ou clique no
      botão abaixo para abrir uma sessão <em>webchat</em> nesta página.
    </p>

    <p>
      <button id="open_webchat">clique para abrir #coffeescript</button>
    </p>

    <h2>
      <span id="changelog" class="bookmark"></span>
      Log de mudanças
    </h2>

    <p>
      <b class="header" style="margin-top: 20px;">
        <a href="https://github.com/jashkenas/coffee-script/compare/1.3.1...1.3.3">1.3.3</a>
        <span class="timestamp"> &ndash; <small>15 mai 2012</small></span>
      </b>
      <ul>
        <li>
          Devido a nova semântica do <i>Strict Mode</i> do JavaScript, CoffeeScript
          não pode mais garantir que as funções contrutoras irão ter nomes em todos
          os ambientes de execução (<i>runtime</i>).
          Veja <a href="https://github.com/jashkenas/coffee-script/issues/2052">#2052</a>
          para discutir a respeito.
        </li>
        <li>
          Dentro de uma função aninhada dentro de um método de instância, agora
          é possível chamar <tt>super</tt> de forma mais confiável (percorre de
          forma recursiva para cima).
        </li>
        <li>
          Nomes de variáveis de loop não mais possuem diferentes heurísticas de escopo
          que outras variáveis locais.
        </li>
        <li>
          Correção em <i>splats</i> aninhadas dentro de atribuições de
          desestruturação LSH.
        </li>
        <li>
          Correções no modo restrito de tempo do compilador que proibía
          literais octais.
        </li>
      </ul>
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">
        <a href="https://github.com/jashkenas/coffee-script/compare/1.2.0...1.3.1">1.3.1</a>
        <span class="timestamp"> &ndash; <small>10 abr 2012</small></span>
      </b>
      <ul>
        <li>
          CoffeeScript agora mostra todos os erros de sintaxe do <b>Strict Mode</b>
          de JavaScript no momento da compilação. Entre os erros mostrados estão a
          forma antiga de definição de octais literais, nomes de propriedades
          duplicadas em objetos literais, parâmetros duplicados em definições
          de funções, deleção de variáveis nuas (<i>naked variables</i>), setar
          o valor de <tt>eval</tt> ou <tt>arguments</tt>, e mais.
          Veja a discussão em
          <a href="https://github.com/jashkenas/coffee-script/issues/1547">#1547</a>.
        </li>
        <li>
          REPL agora possui um modo <i>multi-line</i> para entrada de blocos
          de código maiores. Útil quando estamos copiando e colando exemplos
          dentro do REPL. Entre no modo <i>multi-line</i> com <tt>Ctrl-V</tt>.
          Agora também é possível dar entrada no REPL através do <i>pipe</i>.
        </li>
        <li>
          CoffeeScript agora imprime um cabeçalho <tt>Generated by CoffeeScript VERSION</tt>
          no topo de cada arquivo compilado.
        </li>
        <li>
          Atribuição condicional de variáveis não-definidas previamente
          <tt>a or= b</tt> agora é considerado um erro de sintaxe.
        </li>
        <li>
          Pequena alteração na semântica do <tt>do</tt>, onde agora pode ser
          usado de forma mais fácil para simular um <i>namesace</i>:
          <tt>do (x = 1, y = 2) -> ...</tt>
        </li>
        <li>
          Índices de <i>loops</i> agora são mutáveis dentro das iterações,
          e imutáveis entre elas.
        </li>
        <li>
          Ambos pontos finais de um <i>slice</i> agora são permitidos serem
          omitidos por consistência, efetivamente criando uma cópia raza da lista.
        </li>
        <li>
          Pequenas alterações e melhorias no <tt>coffee --watch</tt> sobre a
          "nova" API de observação de arquivos do Node.js. <tt>--watch</tt> irá
          disparar um <i>beep</i> por padrão sempre que encontrar um erro de
          sintaxe em um dos arquivos que estão sendo observados. Agora diretórios
          escondidos são ignorados por padrão quando observando arquivos de forma
          recursiva.
        </li>
      </ul>
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">
        <a href="https://github.com/jashkenas/coffee-script/compare/1.1.3...1.2.0">1.2.0</a>
        <span class="timestamp"> &ndash; <small>18 dez 2011</small></span>
      </b>
      <ul>
        <li>
          Várias melhorias em <tt>coffee --watch</tt> e <tt>--join</tt>.
          Agora é possível usar ambos juntos, assim como adicionar ou remover
          arquivos e pastas dentro de uma pasta que está rodando <tt>--watch</tt>.
        </li>
        <li>
          <tt>throw</tt> pode ser usado como parte de uma expressão.
        </li>
        <li>
          Comentários em bloco no topo do arquivo irão aparecer fora do invólucro
          da <i>closure</i> de segurança.
        </li>
        <li>
          Corrigidos vários pequenos <i>bugs</i> da versão 1.1.3 relacionados com
          operadores no fim de linhas e linhas não finalizadas, e outros <i>bugs</i>
          maiores que causavam com que funções vinculadas (<i>bound</i>) <b>dentro</b>
          de funções de classes vinculadas (<i>bound</i>) tivessem o valor
          incorreto de <tt>this</tt>.
        </li>
      </ul>
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">
        <a href="https://github.com/jashkenas/coffee-script/compare/1.1.2...1.1.3">1.1.3</a>
        <span class="timestamp"> &ndash; <small>8 nov 2011</small></span>
      </b>
      <ul>
        <li>
          O JavaScript compilado do CoffeeScript agora tenta deixar a saída espaçada
          e manter o código legível, como você pode ver nos exemplos nesta página.
        </li>
        <li>
          Agora é possível chamar <tt>super</tt> no mesmo nível de métodos de
          classe no corpo da classe, e métodos vinculados (<i>bound</i>) a
          classe agora preservam seu contexto correto.
        </li>
        <li>
          JavaScript sempre suportou números octais <tt>010 é 8</tt>, e
          hexadecimais <tt>0xf é 15</tt>, mas CoffeeScript agora também suporta
          números binários: <tt>0b10 é 2</tt>.
        </li>
        <li>
          O módulo CoffeeScript foi aninhado em um subdiretório para que o
          uso do <tt>require</tt> seja mais fácil para componentes individuais
          separados, sem o uso do <b>npm</b>. Por exemplo, após adicionar a pasta
          do CoffeeScript em seu <i>path</i>: <tt>require('coffee-script/lexer')</tt>
        </li>
        <li>
          Existe uma nova funcionalidade "link" em Teste CoffeeScript nesta página.
          Use ele para gerar um <i>permalink</i> com o seu script.
        </li>
        <li>
          A opção <tt>coffee --watch</tt> agora só funciona no Node.js 0.6.0 ou
          mais recente, mas agora funciona de forma correta no Windows.
        </li>
        <li>
          Várias pequenas correções de bugs feitas por
          <b><a href="https://github.com/michaelficarra">@michaelficarra</a></b>,
          <b><a href="https://github.com/geraldalewis">@geraldalewis</a></b>,
          <b><a href="https://github.com/satyr">@satyr</a></b>, e
          <b><a href="https://github.com/trevorburnham">@trevorburnham</a></b>.
        </li>
      </ul>
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">
        <a href="https://github.com/jashkenas/coffee-script/compare/1.1.1...1.1.2">1.1.2</a>
        <span class="timestamp"> &ndash; <small>August 4, 2011</small></span>
      </b>
      Correção na formatação de comentários de bloco, compilação de <tt>?=</tt>,
      chamadas implícitas contra estruturas de controle, invocação implícita de
      um bloco try/catch, argumentos variádicos vazando para o escopo local,
      número de linha de erro de sintaxe seguido de <i>heregex</i>, acesso a
      propriedade em números literais entre parênteses, vincula métodos de
      classes e super com nomes reservados, reformulação do REPL, ponto-e-vírgula
      consecutivos compilados, comentários em bloco de objetos chamados
      de forma implícita e um <i>bug</i> no Chrome.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">1.1.1
        <span class="timestamp"> &ndash; <small>May 10, 2011</small></span>
      </b>
      Correção de <i>bug</i> em classes com funções construtoras externas, ver
      <i>Issue</i> #1182.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">1.1.0
        <span class="timestamp"> &ndash; <small>1 mai 2011</small></span>
      </b>
      Quando executado pelo <tt>coffee</tt>, <tt>process.argv</tt> e similares
      agora informam <tt>coffee</tt> ao invés de <tt>node</tt>.
      Melhor compatibilidade com módulos no <b>Node.js 0.4.x</b>.
      A saída do REPL é agora colorida, como no Node.js.
      Obrigatório dar um nome aos CoffeeScripts concatenados quando usada a <i>flag</i>
      <tt>--join</tt>.
      Correção na análise léxica de divisão composta <tt>=/</tt> como regex.
      Todas as <i>tags</i> <tt>text/coffeescript</tt> agora devem ser executadas
      na ordem que são incluídas.
      Corrigido um problema ao estender subclasses usando funções construtoras
      externas.
      Corrigido problema de velocidade exponencial com chamadas de funções em
      cadeias muito grandes.
      Globais não vazam mais no REPL CoffeeScript.
      Parâmetros <i>splatted</i> são declarados localmente para a função.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">1.0.1
        <span class="timestamp"> &ndash; <small>31 jan 2011</small></span>
      </b>
      Corrigido <i>bug</i> no analizador léxico com identificadores Unicode.
      REPL atualizado para compatibilidade com Node.js 0.3.7.
      Corrigido <i>bug</i> na requisição de caminhos relativos no REPL.
      <tt>return</tt> e <tt>return undefined</tt> finais agora são otimizados.
      O módulo <tt>util</tt> agora não é mais usado devido a compatibilidade com
      Node.js 0.2.5.
      Corrigido um caso onde um <tt>return</tt> condicional poderia disparar
      o <i>case</i> padrão.
      Otimização de objetos vazios na atribuição de desestruturação.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">1.0.0
        <span class="timestamp"> &ndash; <small>24 dez 2010</small></span>
      </b>
      Laços (<em>loops</em>) CoffeeScript não tentam mais preservar o escopo do bloco quando
      funções estão sendo geradas dentro do corpo do laço.
      Caso necessário, você pode usar a palavra-chave <tt>do</tt> para criar um
      <i>wrapper</i> de maneira fácil.
      Adicionada a <i>flag</i> <tt>--nodejs</tt> para passar opções diretamente
      ao executável <tt>node</tt>.
      Melhor comportamento no uso de declarações dentro de expressões.
      Corrigido <i>slicing</i> inclusivo através de <tt>-1</tt>, para todos os
      navegadores, e <i>splicing</i> com expressões como pontos de parada.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.9.6
        <span class="timestamp"> &ndash; <small>6 dez 2010</small></span>
      </b>
      REPL agora formata de forma correta <i>stacktraces</i>, e continua rodando
      entre exceções assíncronas.
      Usando <tt>--watch</tt> agora imprime <i>timestamps</i> quandos os arquivos
      são compilados.
      Corrigido bug que deixava variáveis vazar dentro de <i>plucked closures-loops</i>.
      Construtores agora mantêm o seu local de declaração dentro do corpo da
      classe.
      Chaves de objetos dinâmicos foram removidas.
      Classes aninhadas agora são suportadas.
      Corrige contexto de execução para funções <i>splats</i> nuas
      (<i>naked splatted functions</i>).
      Correção de bug para inversão de comparação em cadeia.
      Instanciação de classes em cadeia agora funcionam de forma correta com
      <i>splats</i>.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.9.5
        <span class="timestamp"> &ndash; <small>21 nov 2010</small></span>
      </b>
      A versão 0.9.5 deve ser considerada a primeira versão candidata a CoffeeScript 1.0.
      Existiram um grande número de mudanças internas desde a última versão, muitos
      contribuiram do dialeto CoffeeScript <a href="http://github.com/satyr/coco">Coco</a>.
      <i>Heregexes</i> (<i>regexes</i> estendidas) foram adicionadas.
      Funções agora podem ter valores padrão em seus argumentos.
      Corpo das classes agora são código executável.
      Melhorias nos erros de sintaxe para CoffeeScript inválido.
      <tt>nudefined</tt> agora funciona como <tt>null</tt>, e não pode ser atribuído
      a um novo valor.
      Houveram mudanças nas regras de precedência em relação a <i>comprehensions single-line</i>:
      <tt>result = i for i in list</tt><br /> era analisado (<i>parsed</i>) em <tt>result = (i for i in list)</tt>
      por padrão ... agora é analisado (<i>parsed</i>) em <br /><tt>(result = i) for i in list</tt>.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.9.4
        <span class="timestamp"> &ndash; <small>21 set 2010</small></span>
      </b>
      CoffeeScript agora usa melhores nomes de variáveis temporárias, e recicla
      suas referências depois do uso.
      Adicionado suporte a <tt>require.extensions</tt> para o <b>Node.js 0.3</b>.
      Carregar CoffeeScript no navegador agora adiciona apenas um objeto <tt>CoffeeScript</tt>
      no escopo global.
      Correções de <i>bug</i> em objetos implícitos e comentários em bloco em alguns
      casos extremos.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.9.3
        <span class="timestamp"> &ndash; <small>16 set 2010</small></span>
      </b>
      <tt>Switch</tt> agora compila para <tt>switch</tt> nativo de JavaScript &mdash;
      eles antigamente compilavam para if/else encadeados para compatibilidade com
      a versão 1.3 do JavaScript.
      Absorver a invocação de uma função agora é suportado.
      Usuários do editor RubyMine agora podem utilizar a <i>flag</i> <tt>--watch</tt>.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.9.2
        <span class="timestamp"> &ndash; <small>23 ago 2010</small></span>
      </b>
      Especificar o começo e fim de um <i>range</i> literal agora é opcional, ex.
      <tt>array[3..]</tt>.
      Agora é possível usar <tt>a not instance of</tt>.
      Importante correção de bug com indentação aninhada significante e
      não-significante (Issue #637).
      Adicionado a <i>flag</i> <tt>--require</tt> que permite que você ligue com
      o comando <tt>coffee</tt>.
      Adicionado um arquivo <tt>jsl.conf</tt> customizado para a sua instalação
      preferida de JavaScriptLint.
      Maior velocidade no tempo de compilação da gramática Jison.
      Comentários em bloco agora podem ser usados com uma sintaxe amigável a
      <i>minifiers</i> JavaScript.
      Adicionados operadores de atribuição compostos <i>bitwise</i>.
      Correção de <i>bugs</i> nos objetos literais implícitos com chaves iniciadas
      em números e <i>string</i>, como o sujeito de chamadas implícitas, e como
      parte de atribuições compostas.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.9.1
        <span class="timestamp"> &ndash; <small>11 ago 2010</small></span>
      </b>
      Correções de <i>bug</i> para <b>0.9.1</b>. Melhora a manipulação de objetos implícitos
      mistos, chamadas implícitas a funções, e identação implícita.
      Interpolação de <i>strings</i> e <i>regex</i> agora é feita apenas com
      <tt>#{ ... }</tt>, como em Ruby.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.9.0
        <span class="timestamp"> &ndash; <small>4 ago 2010</small></span>
      </b>
      As série de versões <b>0.9</b> são candidatas para o lançamento da versão
      <b>1.0</b>.
      A versão <b>0.9</b> introduz várias mudanças que quebram a compatibilidade
      com versões anteriores: atribuições agora usam <tt>=</tt>, e objetos
      literais usam <tt>:</tt>, como em JavaScript. Isto permite termos objetos
      literais implícitos, e definições de objetos no estilo YAML. Meia
      atribuições (<i>half assignments</i>) foram removidas, devido a <tt>+=</tt>,
      <tt>or=</tt>, e outros.
      Interpolação agora usa <tt>#</tt> ao invés de <tt>$</tt> &mdash; pois o sinal
      de dólar pode fazer parte de um indentificador JS válido.
      <i>Range comprehensions</i> ao contrário são seguras novamente, e otimizadas
      para laços <i>for</i> quando criadas com números inteiros como final do
      laço.
      Um forma sem proteção e rápida de <i>object comprehension</i> foi adicionada:
      <tt>for all key, value of object</tt>.
      O uso da palavra-chave <tt>super</tt> sem argumentos agora redireciona todos
      os argumentos passados a função, como em Ruby.
      Se você estender (<tt>extends</tt>) a classe <tt>B</tt> da classe pai
      <tt>A</tt>, e se <tt>A</tt> possui um método <tt>extended</tt> definido,
      ele irá ser chamado, passando <tt>B</tt> &mdash; isto habilita herança
      estática, entre outras coisas.
      Saída mais limpa para <i>bound functions</i> com <tt>=></tt>.
      <tt>@variables</tt> agora podem ser usadas nas listas de parâmetros, com o
      parâmetro sendo automaticamente setado como uma propriedade do objeto
      &mdash; útil em construtores e <i>setter functions</i>.
      Contrutores agora podem receber <i>splats</i>.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.7.2
        <span class="timestamp"> &ndash; <small>12 jul 2010</small></span>
      </b>
      Rápida correção de bug (logo depois da 0.7.1) de um problema que impedia
      que algumas opções da linha de comando <tt>coffee</tt> fossem tratadas de
      forma correta em algumas circunstâncias.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.7.1
        <span class="timestamp"> &ndash; <small>11 jul 2010</small></span>
      </b>
      Comentários no estilo bloco agora são passados e imprimidos como comentários
      em bloco JavaScript -- fazendo deles úteis para licenças e cabeçalhos de
      direitos legais (<i>copyright</i>).
      Melhor suporte na execução de scripts coffee via <i>hashbangs</i>.
      Melhoria nos erros de sintaxe para <i>tokens</i> que não estão na gramática.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.7.0
        <span class="timestamp"> &ndash; <small>28 jun 2010</small></span>
      </b>
      O estilo oficial de variáveis no CoffeeScript agora é camelCase, assim como
      em JavaScript.
      Palavras reservadas agora podem ser chaves de objetos, e serão
      automaticamente postas entre aspas para você.
      <i>Comprehensions</i> de <i>range</i> agora geram um código mais limpo, mas
      você tem de especificar <tt>by -1</tt> se deseja iterar ao contrário.
      Relatório de erros de sintaxe foram bastante melhorados desde a última versão.
      Executando <tt>coffee</tt> sem argumentos agora chama o REPL, com suporte a
      <i>Readline</i>.
      O operador de <i>bind</i> <tt>&lt;-</tt> foi removido do CoffeeScript.
      A palavra-chave <tt>loop</tt> foi adicionada, o que é equivalente ao laço
      <tt>while true</tt>.
      <i>Comprehensions</i> que possuem <i>closures</i> agora vão fechar sobre
      suas variáveis, como na semântica de um <tt>forEach</tt>.
      Agora é possível usar <i>bound functions</i> nas definições de classes.
      Por consistência, <tt>a in b</tt> é agora uma checagem de presença no
      <i>array</i>, e <tt>a of b</tt> é uma checagem de chave no objeto.
      Comentários não são mais passados para o JavaScript gerado.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.6.2
        <span class="timestamp"> &ndash; <small>15 mai 2010</small></span>
      </b>
      O comando <tt>coffee</tt> agora preserva a estrutura de pastas quando compila
      um diretório cheio de scripts.
      Corrigido duas omissões que impediam o compilador CoffeeScript de rodar dentro
      do Internet Explorer.
      Existe agora uma sintaxe para comentários em bloco, similar a sintaxe já existente
      para <i>heredocs</i>.
      <i>Pattern matching</i> ao estilo ECMA Harmony DRY (Don't Repeat Yourself)
      é agora suportado, onde o nome da propriedade é o mesmo nome do valor:
      <tt>{name, length}: func</tt>.
      <i>Pattern matching</i> agora é permitido dentro de variáveis
      <i>comprehension</i>. <tt>unless</tt> é agora suportado como um bloco.
      Laços <tt>until</tt> foram adicionados, como o inverso dos
      laços <tt>while</tt>.
      Declarações <tt>switch</tt> agora são permitidas sem o objeto de cláusulas.
      Compatível com Node.js <b>v.0.1.95</b>.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.6.1
        <span class="timestamp"> &ndash; <small>12 abr 2010</small></span>
      </b>
      Atualização do CoffeeScript para compatibilidade com o novo Node.js <b>v0.1.90</b>
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.6.0
        <span class="timestamp"> &ndash; <small>3 abr 2010</small></span>
      </b>
      Vírgulas no fim das linhas agora são permitidas, a-la Python.
      Propriedades estáticas agora podem ser atribuídas dentro das definições
      de classes, usando a notação <tt>@propriedade</tt>.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.5.6
        <span class="timestamp"> &ndash; <small>23 mar 2010</small></span>
      </b>
      Interpolação agora pode ser usada dentro de expressões regulares and
      <i>heredocs</i>, assim como em <i>strings</i>.
      Adicionado o operador <tt>&lt;-</tt> para <i>binding</i>.
      Atribuição de meia-expressões agora são permitidas ao invés do <tt>||=</tt>.
      O objeto <i>arguments</i> não é mais convertido automaticamente em <i>array</i>.
      Após o <i>require</i>, Node.js pode diretamente carregar arquivos
      <tt>.coffee</tt>, graças a <b>registerExtension</b>.
      <i>Splats</i> múltiplos agora podem ser usados nas chamadas de funções,
      <i>arrays</i> e em combinação de padrões (<i>pattern matching</i>).
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.5.5
        <span class="timestamp"> &ndash; <small>8 mar 2010</small></span>
      </b>
      Interpolação de <i>strings</i>, contribuído por
      <a href="http://github.com/StanAngeloff">Stan Angeloff</a>.
      Uma vez que <tt>--run</tt> está ativo por padrão desde a versão <b>0.5.3</b>,
      atualiza <tt>--stdio</tt> e <tt>--eval</tt> para também rodarem por padrão,
      passe a <i>flag</i> <tt>compile</tt> se quiser também imprimir o resultado.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.5.4
        <span class="timestamp"> &ndash; <small>3 mar 2010</small></span>
      </b>
      Correção de bug que corrige as constantes globais <tt>__filename</tt> e
      <tt>__dirname</tt> do Node.js.
      Pequenas alterações para uma análise sintática mais flexível de funções
      aninhadas e comentários mal indentados.
      Atualizações para a última API do Node.js.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.5.3
        <span class="timestamp"> &ndash; <small>27 fev 2010</small></span>
      </b>
      CoffeeScript agora tem uma sintaxe para definição de classes. Muitos dos
      componentes do <i>core</i> (Node, Lexer, Rewriter, Scope, Optparse) estão
      a usando.
      <i>Cakefiles</i> podem usar <tt>optparse.coffee</tt> para definir opções para
      <i>tasks</i>.
      <tt>--run</tt> agora é a <i>flag</i> padrão para o comando <tt>coffee</tt>,
      use <tt>--compile</tt> para salvar JavaScripts.
      Correção de bug em uma ambiguidade entre RegExp literais e divisões encadeadas.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.5.2
        <span class="timestamp"> &ndash; <small>25 fev 2010</small></span>
      </b>
      Adicinonada uma versão comprimida do compilador para inclusão em páginas
      web como <br /><tt>extras/coffee-script.js</tt>. Ele irá automaticamente
      rodar qualquer <i>tag</i> de <i>script</i> do tipo <tt>text/coffeescript</tt>.
      Adiciona a opção <tt>--stdio</tt> ao comando <tt>coffee</tt>, para uso
      com o <i>pipe</i>.
    </p>


    <p>
      <b class="header" style="margin-top: 20px;">0.5.1
        <span class="timestamp"> &ndash; <small>24 fev 2010</small></span>
      </b>
      Melhorias na absorção de referências nulas (<i>null soaking</i>) com o
      operador existencial, incluindo a absorção em propriedades indexadas.
      Adicionado condições aos laços <tt>while</tt>, o que permite agora
      usá-los como filtros com <tt>when</tt>, da mesma forma que
      <i>comprehensions</i>.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.5.0
        <span class="timestamp"> &ndash; <small>21 fev 2010</small></span>
      </b>
      A versão 0.5.0 do CoffeScript é um grande lançamento (<i>major release</i>).
      Ao mesmo tempo que não existe mudanças na linguagem, o compilador Ruby foi removido
      em troca de um compilador escrito em CoffeeScript.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.3.2
        <span class="timestamp"> &ndash; <small>8 fev 2010</small></span>
      </b>
      <tt>@propriedade</tt> agora serve como um atalho para
      <tt>this.propriedade</tt>.
      <br />
      Node.js agora é o <i>engine</i> padrão. Caso queira continuar a usar
      a antiga <i>engine</i>, Narwhal, passe a <i>flag</i> <tt>--narwhal</tt>.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.3.0
        <span class="timestamp"> &ndash; <small>26 jan 2010</small></span>
      </b>
      CoffeeScript 0.3 inclui grandes mudanças na sintaxe:
      <br />
      O símbolo para função foi modificado para <tt>-></tt>, e o símbolo para
      <i>bound function</i> agora é <tt>=></tt>.
      <br />
      Listas de parâmetros nas definições de funções agora devem estar entre
      parênteses.
      <br />
      Adicionado <i>property soaking</i>, com o operador <tt>?.</tt>.
      <br />
      Parênteses agora são opcionais quando funções com argumentos são invocadas.
      <br />
      Removida a sintaxe obsoleta de bloco literal.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.2.6
        <span class="timestamp"> &ndash; <small>17 jan 2010</small></span>
      </b>
      Adicionado comparações em cadeia como em Python, o operador de existência
      <tt>?=</tt>, e alguns exemplos do <i>Beautiful Code</i>.
      Correções de <i>bugs</i> relacionados a conversão de declarações para
      expressões, conversão de argumentos para <i>array</i>, e o <i>syntax highlighter</i>
      para TextMate.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.2.5
        <span class="timestamp"> &ndash; <small>13 jan 2010</small></span>
      </b>
      As condições dos <tt>switchs</tt> agora aceitam vários valores ao mesmo
      tempo &mdash; Se algum deles for verdadeiro, o <i>case</i> irá rodar.
      Adicionado a senta longa <tt>==></tt>, que define e imediatamente vincula
      (<i>bind</i>) uma função ao <tt>this</tt>. Laços <i>while</i> agora podem
      ser usados como expressões, do mesmo modo como <i>comprehensions</i> podem.
      <i>Splats</i> podem ser usadas dentro de padrões de combinação para capturar o
      resto de um <i>array</i>.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.2.4
        <span class="timestamp"> &ndash; <small>12 jan 2010</small></span>
      </b>
      Adicionada a atribuição de desestruturação seguindo a proposta do
      ECMAScript Harmony, para tratar da extração de valores de <i>arrays</i>
      e objetos aninhados. Adicionado <i>heredocs</i> sensíveis a indentação
      (<i>indentation-sensitive</i>) para uma melhor formatação de <i>strings</i>
      ou pedaços de código.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.2.3
        <span class="timestamp"> &ndash; <small>Jan 11, 2010</small></span>
      </b>
      Removida a palavra-chave <tt>ino</tt>, sendo substituída por <tt>of</tt>
      para <i>object comprehensions</i>. Agora elas funcionam
      da seguinte forma: <tt>for prop, value of object</tt>.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.2.2
        <span class="timestamp"> &ndash; <small>10 de jan 2010</small></span>
      </b>
      Quando executar uma <i>comprehension</i> sobre um objeto, usar <tt>ino</tt>,
      ao invés de <tt>in</tt>, o que ajuda a gerar um código menor e mais
      eficiente durante a compilação.
      Adicionado <tt>::</tt> como um atalho para <tt>.prototype.</tt>
      O símbolo para "splat" foi modificado de um asterisco <tt>*</tt> prefixado
      para reticências <tt>...</tt> com sufixos.
      Adicionado o operador <tt>in</tt> de JavaScript, decalarações <tt>return</tt>
      vazias, laços <tt>while</tt> vazios.
      Funções contrutoras que iniciam com uma letra maiúscula agora incluem
      uma checagem de segurança para assegurar que a nova instância do objeto
      seja retornada.
      A palavra-chave <tt>extends</tt> agora funciona de forma idêntica a
      <tt>goog.inherits</tt> da Google Closure Library.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.2.1
        <span class="timestamp"> &ndash; <small>5 jan 2010</small></span>
      </b>
      Objetos passados como argumentos agora são convertidos em <i>arrays</i>
      reais quando referenciados.

    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.2.0
        <span class="timestamp"> &ndash; <small>5 jan 2010</small></span>
      </b>
      Grande lançamento (<i>major release</i>). Espaço em branco significativo.
      Melhor conversão de declaração para expressão. <i>Splats</i>. Literais <i>splice</i>.
      <i>Comprehensions</i> de objetos. Blocos. Operador existencial. Muito
      obrigado a todos que postaram <i>issues</i>, com um agradecimento especial
      para <a href="http://github.com/liamoc">Liam O'Connor-Davis</a> pela ajuda
      com espaço em branco e expressões.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.1.6
        <span class="timestamp"> &ndash; <small>27 dez 2009</small></span>
      </b>
      Correção de <i>bug</i> para rodar <tt>coffee --interactive</tt> e
      <tt>--run</tt> fora do diretório CoffeeScript. Correção de bug para funções
      e <i>if</i> aninhados.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.1.5
        <span class="timestamp"> &ndash; <small>26 dez 2009</small></span>
      </b>
      Literais <i>Array slice</i> e <i>array comprehensions</i> podem ambos
      utilizar uma sintaxe no estilo Ruby para especificar o começo e fim
      de um <i>range</i>. Declaração de variáveis JavaScript agora são enviadas
      para o topo do escopo, fazendo com que todas as declarações de atribuição
      fiquem dentro de expressões. É possível usar <tt>\</tt> para "escapar"
      (<i>escape</i>) novas linhas.
      O comando <tt>coffee-script</tt> agora é chamado <tt>coffee</tt>.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.1.4
        <span class="timestamp"> &ndash; <small>25 dez 2009</small></span>
      </b>
      A extensão oficial do CoffeScript agora é <tt>.coffee</tt> ao contrário
      de <tt>.cs</tt>, que pertence a
      <a href="http://en.wikipedia.org/wiki/C_Sharp_(programming_language)">C#</a>.
      Devido a vários pedidos, agora é possível usar <tt>=</tt> para atribuição.
      Diferente de JavaScript, <tt>=</tt> pode também ser usado dentro de objetos
      literais, da mesma forma que <tt>:</tt>. Feita uma correção gramatical
      para chamadas de funções em cadeia (<i>chain calls</i>) como
      <tt>func(1)(2)(3)(4)</tt>. Herança e a palavra-chave <tt>super</tt> não
      utilizam mais <tt>__proto__</tt>, fazendo com sejam compatíveis com o IE.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.1.3
        <span class="timestamp"> &ndash; <small>25 dez 2009</small></span>
      </b>
      O comando <tt>coffee</tt> agora inclui a opção
      <tt>--interactive</tt>, que chama uma sessão inteterativa do CoffeeScript,
      e <tt>--run</tt>, que compila e executa um <i>script</i>. Ambas as opções
      dependem da instalação do Narwhal.
      A palavra-chave <tt>aint</tt> foi trocada por <tt>isnt</tt>, o que faz
      mais sentindo junto com <tt>is</tt>.
      <i>Strings</i> com aspas agora são permitidas como identificadores dentro
      de objetos literais: ex. <tt>{"5+5": 10}</tt>.
      Todos os operadores de atribuição agora usam dois pontos: <tt>+:</tt>,
      <tt>-:</tt>, <tt>*:</tt>, etc.

    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.1.2
        <span class="timestamp"> &ndash; <small>24 dez 2009</small></span>
      </b>
      Corrigido um bug quando <tt>super()</tt> era chamado por mais de um nível
      de herança, com a re-adição da palavra-chave <tt>extends</tt>.
      Adicionado suporte experimental a
      <a href="http://narwhaljs.org/">Narwhal</a> (como um pacote Tusk),
      contribuído por <a href="http://tlrobinson.net/">Tom Robinson</a>,
      incluindo <b>bin/cs</b> como um REPL de CoffeeScript e interpretador.
      Nova opção <tt>--no-wrap</tt> para suprimir o <i>wrapper</i> da função
      de segurança.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.1.1
        <span class="timestamp"> &ndash; <small>24 dez 2009</small></span>
      </b>
      Adicionado <tt>instanceof</tt> e <tt>typeof</tt> como operadores.
    </p>

    <p>
      <b class="header" style="margin-top: 20px;">0.1.0
        <span class="timestamp"> &ndash; <small>24 dez  2009</small></span>
      </b>
      Primeira versão do CoffeeScript liberada.
    </p>
    <br /><br />
    <p class="l8p">
      Traduzido para o português por
      <a href="http://loopinfinito.com.br" alt="Loop Infinito" title="Loop Infinito">Loop Infinito</a>
      (<a href="http://twitter.com/loopinfinito" alt="Loop Infinito no Twitter" title="Loop Infinito no Twitter">@loopinfinito</a>).
    </p>

  </div>

  <script type="text/coffeescript">
    sourceFragment = "try:"

    # Set up the compilation function, to run when you stop typing.
    compileSource = ->
      source = $('#repl_source').val()
      window.compiledJS = ''
      try
        window.compiledJS = CoffeeScript.compile source, bare: on
        el = $('#repl_results')[0]
        if el.innerText
          el.innerText = window.compiledJS
        else
          $(el).text window.compiledJS
        $('#error').hide()
      catch error
        $('#error').text(error.message).show()

      # Update permalink
      $('#repl_permalink').attr 'href', "##{sourceFragment}#{encodeURIComponent source}"

    # Listen for keypresses and recompile.
    $('#repl_source').keyup -> compileSource()

    # Eval the compiled js.
    evalJS = ->
      try
        eval window.compiledJS
      catch error then alert error

    # Load the console with a string of CoffeeScript.
    window.loadConsole = (coffee) ->
      $('#repl_source').val coffee
      compileSource()
      $('.navigation.try').addClass('active')
      false

    # Helper to hide the menus.
    closeMenus = ->
      $('.navigation.active').removeClass 'active'

    $('.minibutton.run').click -> evalJS()

    # Bind navigation buttons to open the menus.
    $('.navigation').click (e) ->
      return if e.target.tagName.toLowerCase() is 'a'
      return false if $(e.target).closest('.repl_wrapper').length
      if $(this).hasClass('active')
        closeMenus()
      else
        closeMenus()
        $(this).addClass 'active'
      false

    # Dismiss console if Escape pressed or click falls outside console
    # Trigger Run button on Ctrl-Enter
    $(document.body)
      .keydown (e) ->
        closeMenus() if e.which == 27
        evalJS() if e.which == 13 and (e.metaKey or e.ctrlKey) and $('.minibutton.run:visible').length
      .click (e) ->
        return false if $(e.target).hasClass('minibutton')
        closeMenus()

    $('#open_webchat').click ->
      $(this).replaceWith $('<iframe src="http://webchat.freenode.net/?channels=coffeescript" width="625" height="400"></iframe>')

    $("#repl_permalink").click (e) ->
        window.location = $(this).attr("href")
        false

    # If source code is included in location.hash, display it.
    hash = decodeURIComponent location.hash.replace(/^#/, '')
    if hash.indexOf(sourceFragment) == 0
        src = hash.substr sourceFragment.length
        loadConsole src

    compileSource()

  </script>

  <script src="documentation/vendor/jquery-1.6.4.js"></script>
  <script src="extras/coffee-script.js"></script>
  <script>
  $(document).ready( function(){
    $('.minibutton.load').click( function(){
      _gaq.push(['_trackEvent', 'btn_load']);
    })
    $('.minibutton.ok').click( function(){
      _gaq.push(['_trackEvent', 'btn_run']);
    })
  });
  </script>

</body>
</html>
